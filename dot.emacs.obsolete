(setq load-path
      (append
       (list
        (expand-file-name "/usr/share/emacs/24.3/site-lisp")
;;      (expand-file-name "/usr/share/emacs/site-lisp/w3m")
        )load-path))

;;;; Mule-UCS
;; (require 'un-define)
;; (require 'jisx0213)

;;; 日本語環境
(set-language-environment     "Japanese")
(set-terminal-coding-system   'utf-8)
(set-keyboard-coding-system   'utf-8)
(setq menu-coding-system      'utf-8)

;;; file cording style
(set-default-coding-systems   'utf-8)
(setq coding-system-for-read  'utf-8)
;; (set-default-coding-systems   'euc-jp)
;; (setq coding-system-for-read  'euc-jp)

;; キーバインド
(global-set-key [f2]  'other-window)
(global-set-key [f4]  'swap-screen)
(global-set-key [f9]  'eshell)
(global-set-key [f5]  'folding-mode)
(global-set-key [f7]  'enlarge-window-horizontally)
(global-set-key [f8]  'enlarge-window)
(global-set-key [f9]  'flyspell-mode)
(global-set-key [f10] 'flyspell-buffer)
(global-set-key [f11] 'ibuffer)
(global-set-key [f12] 'undo)
(global-set-key [delete] 'delete-backward-char)
(global-set-key [kp-delete] 'delete-backward-char)
(define-key global-map "\C-h"     'delete-backward-char)
(define-key global-map "\C-x\C-h" 'help-command)
(define-key global-map "\M-n"    'indent-and-next-line)  ;; 自動インデント
(define-key global-map "\C-cn"    'goto-line)
(define-key global-map "\C-x\C-g" 'grep-find)

(setq ispell-program-name "aspell")

;; メニューバーを表示しない
(menu-bar-mode 0)
(define-key minibuffer-local-completion-map "\C-w" 'backward-kill-word)
(setq-default truncate-lines t)

;; ;; compilation window
;; (defun my-compilation-hook ()
;;   (when (not (get-buffer-window "*compilation*"))
;;     (save-selected-window
;;       (save-excursion
;;         (let* ((w (split-window-vertically))
;;                (h (window-height w)))
;;           (select-window w)
;;           (switch-to-buffer "*compilation*")
;;           (shrink-window (- h 10)))))))
;; (add-hook 'compilation-mode-hook 'my-compilation-hook)

;; ;; バックアップファイルの命名規則
(setq make-backup-files nil)
;; (defun make-backup-file-name (filename)
;;   (expand-file-name
;;    (concat "." (file-name-nondirectory filename) "~")
;;    (file-name-directory filename)))

;; dired設定
(setq dired-listing-switches "-al --g")
(add-hook 'dired-before-readin-hook
  (lambda ()
    (set (make-local-variable 'coding-system-for-read) 'euc-jp)))

;;; 一気にファイルの coding systemを変換する
(require 'dired-aux)
(add-hook 'dired-mode-hook
          (lambda ()
            (define-key (current-local-map) "T"
              'dired-do-convert-coding-system)))
(defvar dired-default-file-coding-system nil
  "*Default coding system for converting file (s).")
(defvar dired-file-coding-system 'no-conversion)
(defun dired-convert-coding-system ()
  (let ((file (dired-get-filename))
        (coding-system-for-write dired-file-coding-system)
        failure)
    (condition-case err
        (with-temp-buffer
          (insert-file file)
          (write-region (point-min) (point-max) file))
      (error (setq failure err)))
    (if (not failure)
        nil
      (dired-log "convert coding system error for %s:\n%s\n" file failure)
      (dired-make-relative file))))
(defun dired-do-convert-coding-system (coding-system &optional arg)
  "Convert file (s) in specified coding system."
  (interactive
   (list (let ((default (or dired-default-file-coding-system
                            buffer-file-coding-system)))
           (read-coding-system
            (format "Coding system for converting file (s) (default, %s): "
                    default)
            default))
         current-prefix-arg))
  (check-coding-system coding-system)
  (setq dired-file-coding-system coding-system)
  (dired-map-over-marks-check
   (function dired-convert-coding-system) arg 'convert-coding-system t))

;; インデント設定
(setq default-tab-width 4)
(setq-default indent-tabs-mode nil)
(defun indent-and-next-line ()
  (interactive)
  (indent-according-to-mode)
  (next-line 1))

(column-number-mode t)
(auto-compression-mode 1)

;; 文字の折り返し
(setq truncate-lines t)
(setq truncate-partial-width-windows t)

;; カラー設定
(require 'color-theme)
(color-theme-initialize)
(global-font-lock-mode t)
(color-theme-sp1rytus)

;; 全角空白とタブに色を付ける
(defface my-face-b-1 '((t (:background "brightwhite"))) nil)
(defface my-face-b-2 '((t (:background "brightblack"))) nil)
(defvar my-face-b-1 'my-face-b-1)
(defvar my-face-b-2 'my-face-b-2)
(defadvice font-lock-mode (before my-font-lock-mode ())
  (font-lock-add-keywords
   major-mode
   '(("　" 0 my-face-b-1 append)
     ("\t" 0 my-face-b-2 append)
     )))
(ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
(ad-activate 'font-lock-mode)

;; flyspell-mode
(eval-when-compile
  (require 'flyspell)
  (require 'ispell))
(if (file-executable-p "/usr/bin/aspell")
    (setq-default ispell-program-name "aspell")
    (setq-default ispell-program-name "ispell"))

(eval-after-load "ispell"
  '(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
(add-to-list 'auto-mode-alist '("\\.php" . flyspell-mode))

;; google-translate
(require 'google-translate)

(global-set-key [(C x) (C t)] 'google-translate-at-point)
(custom-set-variables
  '(google-translate-default-source-language "en")
  '(google-translate-default-target-language "ja"))

;; 行末のスペースに色をつける
(setq-default show-trailing-whitespace t)
(set-face-background 'trailing-whitespace "brightwhite")

;; 現在の編集中の行をハイライト
;; (global-hl-line-mode)
;; (hl-line-mode 1)
;; (defface hlline-face
;;   '((((class color)
;;       (background dark))
;;      (:background "midnightblue" :foreground "white"))
;;     (((class color)
;;       (background light))
;;      (:background "ForestGreen"))
;;     (t
;;      ()))
;;   "*Face used by hl-line.")
;; (setq hl-line-face 'hlline-face)

(autoload 'table-mode "table-mode"
  "Major mode for editing tables and simple spread sheets." t)
(setq auto-mode-alist
  (append '(("\\.tbl$" . table-mode2)) auto-mode-alist))

(autoload 'gtags-mode "gtags" "" t)
(setq gtags-mode-hook
      '(lambda ()
         (local-set-key "\M-t" 'gtags-find-tag)
         (local-set-key "\M-r" 'gtags-find-rtag)
         (local-set-key "\M-s" 'gtags-find-symbol)
         (local-set-key "\C-t" 'gtags-pop-stack)
         ))

;; folding mode
(autoload 'folding-mode "folding" nil t)
;; ibuffer mode
(require 'ibuffer)
;; smarty-mode
(require 'smarty-mode)
(add-to-list 'auto-mode-alist (cons "\\.tpl\\'" 'smarty-mode))
(autoload 'smarty-mode "smarty-mode" "Smarty Mode" t)

(require 'sql)

;; hack-mode
(require 'hack-mode)
(require 'hack-for-hiphop)
(setq auto-mode-alist
      (cons (cons "\\.\\(phtml\\|ctp\\|thtml\\|inc\\|php[s34]?\\|hh\\)" 'hack-mode) auto-mode-alist))
(autoload 'hack-mode "hack-mode" "Hack mode" t)

;; ;; php-mode
;; (require 'php-mode)
;; ;; (require 'yasnippet)
;; ;; (yas/load-directory "/usr/local/share/emacs22.2/site-lisp/snippets")
;; ;; (add-to-list 'yas/extra-mode-hooks
;; ;;              'php-mode-hook)
;; ;; (setq-default tab-width 4)
;; (setq auto-mode-alist
;;       (cons (cons "\\.\\(phtml\\|ctp\\|thtml\\|inc\\|php[s34]?\\|hh[i]?\\)" 'php-mode) auto-mode-alist))
;; (autoload 'php-mode "php-mode" "PHP mode" t)


;; ruby-mode
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))
(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
          '(lambda ()
             (inf-ruby-keys)))

(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
(autoload 'typescript-mode "TypeScript" "Major mode for editing typescript." t)


(require 'scss-mode)
(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
(setq scss-compile-at-save nil)

(require 'sws-mode)
(require 'jade-mode)
(add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))

(load "markdown-mode")
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))


;; ;; rst-mode
;; (require 'rst)
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(rst-level-1-face ((t (:foreground "LightSkyBlue"))) t)
;;  '(rst-level-2-face ((t (:foreground "LightGoldenrod"))) t)
;;  '(rst-level-3-face ((t (:foreground "Cyan1"))) t)
;;  '(rst-level-4-face ((t (:foreground "chocolate1"))) t)
;;  '(rst-level-5-face ((t (:foreground "PaleGreen"))) t)
;;  '(rst-level-6-face ((t (:foreground "Aquamarine"))) t))
;;  ;; (rst-level-7-face ((t (:foreground "LightSteelBlue"))) t)  ;; メモ
;;  ;; (rst-level-8-face ((t (:foreground "LightSalmon"))) t)
;; (custom-set-variables
;;   ;; custom-set-variables was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(rst-level-face-base-light 50))
;; (setq auto-mode-alist
;;       (append '(("\\.rst$" . rst-mode)) auto-mode-alist))
;; (add-hook 'rst-mode-hook '(lambda() (setq indent-tabs-mode nil)))

;;(require 'w3m-load)
;;(setq browse-url-generic-program (executable-find "w3m")
;;browse-url-browser-function 'browse-url-generic)
;;(defvar php-search-url "http://www.php.net/")
;;(defvar php-manual-url "http://www.php.net/manual/ja/")
;;(defun php-search-documentation ()
;;  "Search PHP documentation for the word at the point."
;;  (interactive)
;;  (w3m-browse-url (concat php-search-url (current-word t))))
;;(defun php-browse-manual ()
;;  "Bring up manual for PHP."
;;  (interactive)
;;  (w3m-browse-url php-manual-url))

;; (yas/initialize)

;; hook 用の関数の定義
(defun my-c-mode-common-hook ()
  ;; my-c-stye を有効にする
  (c-set-style "cc-mode")

  ;;   ;; 次のスタイルがデフォルトで用意されているので選択してもよい
  ;; (c-set-style "k&r")
  ;;   (c-set-style "gnu")
  ;;   (c-set-style "cc-mode")
  ;;   (c-set-style "stroustrup")
  ;;   (c-set-style "ellemtel")
  ;;   ;; 既存のスタイルを変更する場合は次のようにする
  ;;   (c-set-offset 'member-init-intro '++)

  ;; タブ長の設定
  (setq tab-width 4)

  ;; タブの代わりにスペースを使う
  ;; (setq indent-tabs-mode nil)

  ;; 自動改行(auto-newline)を有効にする (C-c C-a)
  (c-toggle-auto-state t)

  ;; 連続する空白の一括削除(hungry-delete)を有効にする (C-c C-d)
  (c-toggle-hungry-state t)

  ;; セミコロンで自動改行しない
  (setq c-hanging-semi&comma-criteria nil)

  ;; カッコ前後の自動改行処理の設定
   (setq c-hanging-braces-alist
    '(
      (class-open)          ; クラス宣言の'{'
      (class-close)         ; クラス宣言の'}'
      (defun-open)          ; 関数宣言の'{'
      (defun-close)         ; 関数宣言の'}'
      (inline-open)         ; クラス内のインライン関数宣言の'{'
      (inline-close)        ; クラス内のインライン関数宣言の'}'
      (brace-list-open)     ; 列挙型、配列宣言の'{'
      (brace-list-close)    ; 列挙型、配列宣言の'}'
      (block-open)          ; ステートメントの'{'
      (block-close)         ; ステートメントの'}'
      (substatement-open)   ; サブステートメント(if 文等)の'{'
      (statement-case-open) ; case 文の'{'
      (extern-lang-open)    ; 他言語へのリンケージ宣言の '{'
      (extern-lang-close)   ; 他言語へのリンケージ宣言の '}'
      (inexpr-class-open)
      (inexpr-class-close)))

  ;; キーバインドの追加
  ;; ------------------
  ;; C-m    改行＋インデント
  ;; C-c c  コンパイルコマンドの起動
  ;; C-h    空白の一括削除
  (define-key c-mode-base-map "\C-m" 'newline-and-indent)
  (define-key c-mode-base-map "\C-cc" 'compile)
  (define-key c-mode-base-map "\C-h" 'c-electric-backspace)

  ;;   ;; コンパイルコマンドの設定
  ;;   (setq compile-command "make -k" )   ; GNU make
  ;;   (setq compile-command "nmake /NOLOGO /S") ; VC++ の nmake

  ) ;; my-c-mode-common-hook

;; モードに入るときに呼び出す hook の設定
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;
;; ediff
;;
;; control windowを新たなframeにしない。
;; こうしないと挙動不審なため
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;;始めっから縦割りにする(コマンド"|"で切り替えれる)
;;さらにコマンド"m"でフレームの最大最小表示の切り替え
(setq ediff-split-window-function 'split-window-horizontally)

;;; タブとスペースをすべて無視するdiffオプションの設定
(setq ediff-diff-options "-w")

;;(setq ediff-current-diff-face-A
;;      (copy-face 'bold-italic 'ediff-current-diff-face-A))

(add-hook 'ediff-load-hook
          (function (lambda ()
                      (set-face-foreground ediff-current-diff-face-B "blue")
                      (set-face-background ediff-current-diff-face-B "red"))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(display-time-mode nil)
 '(menu-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
